# 1 "HWBus.sc"
# 1 "/home/ecelrc/students/ssong/labs/lab2/b/2//"
# 1 "<built-in>"
# 1 "<command line>"
# 1 "HWBus.sc"




import "i_send";
import "i_receive";

import "c_handshake";
# 28 "HWBus.sc"
interface IMasterHardwareBusProtocol
{
  void masterWrite(unsigned bit[16u -1:0] a, unsigned bit[32u -1:0] d);
  void masterRead (unsigned bit[16u -1:0] a, unsigned bit[32u -1:0] *d);
};

interface ISlaveHardwareBusProtocol
{
  void slaveWrite(unsigned bit[16u -1:0] a, unsigned bit[32u -1:0] d);
  void slaveRead (unsigned bit[16u -1:0] a, unsigned bit[32u -1:0] *d);
};


channel MasterHardwareBus(out signal unsigned bit[16u -1:0] A,
                              signal unsigned bit[32u -1:0] D,
                          out signal unsigned bit[1] ready,
                          in signal unsigned bit[1] ack)
  implements IMasterHardwareBusProtocol
{
  void masterWrite(unsigned bit[16u -1:0] a, unsigned bit[32u -1:0] d)
  {
    do {
      t1: A = a;
          D = d;
          waitfor(5000);
      t2: ready = 1;
          while(!ack) wait(ack);
      t3: waitfor(10000);
      t4: ready = 0;
          while(ack) wait(ack);
    }
    timing {
      range(t1; t2; 5000; 15000);
      range(t3; t4; 10000; 25000);
    }
  }

  void masterRead (unsigned bit[16u -1:0] a, unsigned bit[32u -1:0] *d)
  {
    do {
      t1: A = a;
          waitfor(5000);
      t2: ready = 1;
          while(!ack) wait(ack);
      t3: *d = D;
          waitfor(15000);
      t4: ready = 0;
          while(ack) wait(ack);
    }
    timing {
      range(t1; t2; 5000; 15000);
      range(t3; t4; 10000; 25000);
    }
  }

};



channel SlaveHardwareBus(in signal unsigned bit[16u -1:0] A,
                             signal unsigned bit[32u -1:0] D,
                         in signal unsigned bit[1] ready,
                         out signal unsigned bit[1] ack)
  implements ISlaveHardwareBusProtocol
{
  void slaveWrite(unsigned bit[16u -1:0] a, unsigned bit[32u -1:0] d)
  {
    do {
      t1: while(!ready) wait(ready);
      t2: if(a != A) {
            waitfor(1000);
            goto t1;
          }
          else {
            D = d;
            waitfor(12000);
          }
      t3: ack = 1;
          while(ready) wait(ready);
      t4: waitfor(7000);
      t5: ack = 0;
    }
    timing {
      range(t2; t3; 10000; 20000);
      range(t4; t5; 5000; 15000);
    }
  }

  void slaveRead (unsigned bit[16u -1:0] a, unsigned bit[32u -1:0] *d)
  {
    do {
      t1: while(!ready) wait(ready);
      t2: if(a != A) {
            waitfor(1000);
     goto t1;
   }
          else {
            *d = D;
            waitfor(12000);
          }
      t3: ack = 1;
          while(ready) wait(ready);
      t4: waitfor(7000);
      t5: ack = 0;
    }
    timing {
      range(t2; t3; 10000; 20000);
      range(t4; t5; 5000; 15000);
    }
  }
};



channel MasterHardwareSyncDetect(i_receive intr)
  implements i_receive
{
  void receive(void)
  {
 intr.receive();
  }
};

channel SlaveHardwareSyncGenerate(i_send intr)
  implements i_send
{
  void send(void)
  {
 intr.send();
 waitfor(5000);
  }
};




interface IMasterHardwareBusLinkAccess
{
  void MasterRead(int addr, void *data, unsigned long len);
  void MasterWrite(int addr, const void* data, unsigned long len);
};

interface ISlaveHardwareBusLinkAccess
{
  void SlaveRead(int addr, void *data, unsigned long len);
  void SlaveWrite(int addr, const void* data, unsigned long len);
};

channel MasterHardwareBusLinkAccess(IMasterHardwareBusProtocol protocol)
  implements IMasterHardwareBusLinkAccess
{
  void MasterWrite(int addr, const void* data, unsigned long len)
  {
    unsigned long i;
    unsigned char *p;
    unsigned bit[32u -1:0] word = 0;

    for(p = (unsigned char*)data, i = 0; i < len; i++, p++)
    {
      word = (word<<8) + *p;

      if(!((i+1)%4u)) {
 protocol.masterWrite(addr, word);
 word = 0;
      }
    }

    if(i%4u) {
      word <<= 8 * (4u - (i%4u));
      protocol.masterWrite(addr, word);
    }
  }

  void MasterRead(int addr, void* data, unsigned long len)
  {
    unsigned long i;
    unsigned char* p;
    unsigned bit[32u -1:0] word;

    for(p = (unsigned char*)data, i = 0; i < len; i++, p++)
    {
      if(!(i%4u)) {
 protocol.masterRead(addr, &word);
      }

      *p = word[32u -1:32u -8];
      word = word << 8;
    }
  }
};

channel SlaveHardwareBusLinkAccess(ISlaveHardwareBusProtocol protocol)
  implements ISlaveHardwareBusLinkAccess
{
  void SlaveWrite(int addr, const void* data, unsigned long len)
  {
    unsigned long i;
    unsigned char *p;
    unsigned bit[32u -1:0] word = 0;

    for(p = (unsigned char*)data, i = 0; i < len; i++, p++)
    {
      word = (word<<8) + *p;

      if(!((i+1)%4u)) {
 protocol.slaveWrite(addr, word);
 word = 0;
      }
    }

    if(i%4u) {
      word <<= 8 * (4u - (i%4u));
      protocol.slaveWrite(addr, word);
    }
  }

  void SlaveRead(int addr, void* data, unsigned long len)
  {
    unsigned long i;
    unsigned char* p;
    unsigned bit[32u -1:0] word;

    for(p = (unsigned char*)data, i = 0; i < len; i++, p++)
    {
      if(!(i%4u)) {
 protocol.slaveRead(addr, &word);
      }

      *p = word[32u -1:32u -8];
      word = word << 8;
    }
  }
};





interface IMasterHardwareBus
{
  void MasterRead(unsigned bit[16u -1:0] addr, void *data, unsigned long len);
  void MasterWrite(unsigned bit[16u -1:0] addr, const void* data, unsigned long len);

  void MasterSyncReceive0();
  void MasterSyncReceive1();
};

interface ISlaveHardwareBus
{
  void SlaveRead(unsigned bit[16u -1:0] addr, void *data, unsigned long len);
  void SlaveWrite(unsigned bit[16u -1:0] addr, const void* data, unsigned long len);

  void SlaveSyncSend0();
  void SlaveSyncSend1();
};



channel HardwareBus()
  implements IMasterHardwareBus, ISlaveHardwareBus
{

  signal unsigned bit[16u -1:0] A;
  signal unsigned bit[32u -1:0] D;
  signal unsigned bit[1] ready = 0;
  signal unsigned bit[1] ack = 0;


  c_handshake intr0, intr1;

  MasterHardwareSyncDetect MasterSync0(intr0);
  SlaveHardwareSyncGenerate SlaveSync0(intr0);

  MasterHardwareSyncDetect MasterSync1(intr1);
  SlaveHardwareSyncGenerate SlaveSync1(intr1);

  MasterHardwareBus Master(A, D, ready, ack);
  SlaveHardwareBus Slave(A, D, ready, ack);

  MasterHardwareBusLinkAccess MasterLink(Master);
  SlaveHardwareBusLinkAccess SlaveLink(Slave);


  void MasterRead(unsigned bit[16u -1:0] addr, void *data, unsigned long len) {
    MasterLink.MasterRead(addr, data, len);
  }

  void MasterWrite(unsigned bit[16u -1:0] addr, const void *data, unsigned long len) {
    MasterLink.MasterWrite(addr, data, len);
  }

  void SlaveRead(unsigned bit[16u -1:0] addr, void *data, unsigned long len) {
    SlaveLink.SlaveRead(addr, data, len);
  }

  void SlaveWrite(unsigned bit[16u -1:0] addr, const void *data, unsigned long len) {
    SlaveLink.SlaveWrite(addr, data, len);
  }

  void MasterSyncReceive0() {
    MasterSync0.receive();
  }
  void MasterSyncReceive1() {
    MasterSync1.receive();
  }

  void SlaveSyncSend0() {
    SlaveSync0.send();
  }

  void SlaveSyncSend1() {
    SlaveSync1.send();
  }
};
