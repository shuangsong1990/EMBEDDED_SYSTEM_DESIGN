# 1 "HWBus.sc"
# 1 "/home/ecelrc/students/ssong/labs/lab2/b/4//"
# 1 "<built-in>"
# 1 "<command line>"
# 1 "HWBus.sc"




import "i_send";
import "i_receive";

import "c_handshake";
# 28 "HWBus.sc"
interface IMasterHardwareBusProtocol
{
  void masterWrite(unsigned bit[16u -1:0] a, unsigned bit[32u -1:0] d);
  void masterRead (unsigned bit[16u -1:0] a, unsigned bit[32u -1:0] *d);
};

interface ISlaveHardwareBusProtocol
{
  void slaveWrite(unsigned bit[16u -1:0] a, unsigned bit[32u -1:0] d);
  void slaveRead (unsigned bit[16u -1:0] a, unsigned bit[32u -1:0] *d);
};



interface IMasterHardwareBusLinkAccess
{
  void MasterRead(int addr, void *data, unsigned long len);
  void MasterWrite(int addr, const void* data, unsigned long len);
};

interface ISlaveHardwareBusLinkAccess
{
  void SlaveRead(int addr, void *data, unsigned long len);
  void SlaveWrite(int addr, const void* data, unsigned long len);
};

channel MACTLMHardwareBus() implements IMasterHardwareBusLinkAccess, ISlaveHardwareBusLinkAccess
{
 signal unsigned bit[16u -1:0] A;
 unsigned char D[7220];
 event ack, rdy;

 void MasterWrite(int addr, const void *data, unsigned long len){
  unsigned long i;
  unsigned char* p;
  A = addr;
  for (p = (unsigned char*) data, i = 0; i < len; i ++, p ++){
   D[i] = *p;
  }
  notify rdy;
  wait ack;
  waitfor(34000 * len/4);
 }

 void MasterRead(int addr, void *data, unsigned long len){
  unsigned long i;
  unsigned char* p;
  A = addr;
  notify rdy;
  wait ack;
  for (p = (unsigned char*) data, i = 0; i < len; i ++, p ++){
   *p = D[i];
  }
  waitfor(39000 * len/4);
 }

 void SlaveRead(int addr, void *data, unsigned long len){
  unsigned long i;
  unsigned char *p;
  do{
   wait rdy;
  }while(addr != A);
  for(p = (unsigned char*) data, i = 0; i < len; i ++, p ++){
   *p = D[i];
  }
  notify ack;
 }

 void SlaveWrite(int addr, const void *data, unsigned long len){
  unsigned long i;
  unsigned char *p;
  do{
   wait rdy;
  }while(addr != A);

  for (p = (unsigned char*)data, i = 0; i < len; i ++, p ++){
   D[i] = *p;
  }
  notify ack;
 }
};
# 168 "HWBus.sc"
channel MasterHardwareSyncDetect(i_receive intr)
  implements i_receive
{
  void receive(void)
  {
 intr.receive();
  }
};

channel SlaveHardwareSyncGenerate(i_send intr)
  implements i_send
{
  void send(void)
  {
 intr.send();
  }
};
# 279 "HWBus.sc"
interface IMasterHardwareBus
{
  void MasterRead(unsigned bit[16u -1:0] addr, void *data, unsigned long len);
  void MasterWrite(unsigned bit[16u -1:0] addr, const void* data, unsigned long len);

  void MasterSyncReceive0();
  void MasterSyncReceive1();
};

interface ISlaveHardwareBus
{
  void SlaveRead(unsigned bit[16u -1:0] addr, void *data, unsigned long len);
  void SlaveWrite(unsigned bit[16u -1:0] addr, const void* data, unsigned long len);

  void SlaveSyncSend0();
  void SlaveSyncSend1();
};



channel HardwareBus()
  implements IMasterHardwareBus, ISlaveHardwareBus
{
# 310 "HWBus.sc"
  c_handshake intr0, intr1;

  MasterHardwareSyncDetect MasterSync0(intr0);
  SlaveHardwareSyncGenerate SlaveSync0(intr0);

  MasterHardwareSyncDetect MasterSync1(intr1);
  SlaveHardwareSyncGenerate SlaveSync1(intr1);
# 329 "HWBus.sc"
  MACTLMHardwareBus mac_tlm;

  void MasterRead(unsigned bit[16u -1:0] addr, void *data, unsigned long len) {
    mac_tlm.MasterRead(addr, data, len);
  }

  void MasterWrite(unsigned bit[16u -1:0] addr, const void *data, unsigned long len) {
    mac_tlm.MasterWrite(addr, data, len);
  }

  void SlaveRead(unsigned bit[16u -1:0] addr, void *data, unsigned long len) {
    mac_tlm.SlaveRead(addr, data, len);
  }

  void SlaveWrite(unsigned bit[16u -1:0] addr, const void *data, unsigned long len) {
    mac_tlm.SlaveWrite(addr, data, len);
  }

  void MasterSyncReceive0() {
    MasterSync0.receive();
  }
  void MasterSyncReceive1() {
    MasterSync1.receive();
  }

  void SlaveSyncSend0() {
    SlaveSync0.send();
  }

  void SlaveSyncSend1() {
    SlaveSync1.send();
  }
};
