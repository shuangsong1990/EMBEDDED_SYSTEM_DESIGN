# 1 "c_int7220_queue_sr.sc"
# 1 "/home/ecelrc/students/ssong/labs/lab2/a/a_meng/3//"
# 1 "<built-in>"
# 1 "<command line>"
# 1 "c_int7220_queue_sr.sc"
# 1 "c_typed_queue_sr.sh" 1
# 64 "c_typed_queue_sr.sh"
extern void perror(const char*);


extern void abort(void);
extern void *malloc(unsigned int);
extern void free(void*);
extern void *memcpy(void*, const void*, unsigned int);


# 1 "/usr/local/packages/sce-20100908/inc/i_typed_sender.sh" 1 3 4
# 74 "c_typed_queue_sr.sh" 2
# 1 "/usr/local/packages/sce-20100908/inc/i_typed_receiver.sh" 1 3 4
# 75 "c_typed_queue_sr.sh" 2
# 1 "/usr/local/packages/sce-20100908/inc/i_typed_tranceiver.sh" 1 3 4
# 76 "c_typed_queue_sr.sh" 2

import "os";
# 2 "c_int7220_queue_sr.sc" 2
import "os";

typedef int int7220[7220];

interface i_int7220sr_tranceiver { note _SCE_STANDARD_LIB = { "i_tranceiver", "int7220sr", "int7220" }; void send(int7220 d); void receive(int7220 *d); };
interface i_int7220sr_sender { note _SCE_STANDARD_LIB = { "i_sender", "int7220sr", "int7220" }; void send(int7220 d); };
interface i_int7220sr_receiver { note _SCE_STANDARD_LIB = { "i_receiver", "int7220sr", "int7220" }; void receive(int7220 *d); };
channel c_int7220sr_queue(in const unsigned long size, OSAPI rtos) implements i_int7220sr_sender, i_int7220sr_receiver, i_int7220sr_tranceiver { note _SCE_STANDARD_LIB = { "c_queue_sr", "int7220sr", "int7220" }; event r, s; unsigned long wr = 0; unsigned long ws = 0; unsigned long p = 0; unsigned long n = 0; int7220 *buffer = 0; void setup(void) { if (!buffer) { unsigned long i; int7220 dummy; if (!(buffer = (int7220*) malloc(sizeof(int7220)*size))) { perror("c_typed_queue"); abort(); } for(i=0; i<size; i++) { memcpy(&buffer[i], &dummy, sizeof(int7220)); } } } void cleanup(void) { if (! n) { free(buffer); buffer = 0; } } void receive(int7220 *d) { struct Task t; while(! n) { wr++; t = rtos.pre_wait(); printf("pre_wait id is %d\n", t.id); wait r; printf("receive post wait\n"); rtos.post_wait(t); wr--; } if (n <= p) { *d = buffer[p - n]; } else { *d = buffer[p + size - n]; } n--; if (ws) { notify s; } cleanup(); } void send(int7220 d) { struct Task t; while(n >= size) { ws++; t = rtos.pre_wait(); printf("pre_wait id is %d\n", t.id); wait s; printf("send post wait\n"); rtos.post_wait(t); ws--; } setup(); buffer[p] = d; p++; if (p >= size) { p = 0; } n++; if (wr) { notify r; } } };
